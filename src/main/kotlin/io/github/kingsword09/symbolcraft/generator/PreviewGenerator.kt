package io.github.kingsword09.symbolcraft.generator

import io.github.kingsword09.symbolcraft.model.SymbolStyle
import java.io.File

/**
 * Generates Compose Preview functions for Material Symbols icons
 * Supports both androidx.compose and jetpack compose preview annotations
 */
class PreviewGenerator(
    private val packageName: String,
    private val iconSize: Int = 24,
    private val backgroundColor: String = "#FFFFFF"
) {

    fun generatePreviewFile(
        outputDir: File,
        iconConfigs: Map<String, List<SymbolStyle>>,
        hasAndroidxPreview: Boolean = true,
        hasJetpackPreview: Boolean = false
    ) {
        val previewPackage = "${packageName}.preview"
        val packagePath = previewPackage.replace('.', '/')
        val outputDirPath = File(outputDir, packagePath)

        if (!outputDirPath.mkdirs() && !outputDirPath.exists()) {
            throw IllegalStateException("Failed to create preview output directory: ${outputDirPath.absolutePath}")
        }

        val previewFile = File(outputDirPath, "MaterialSymbolsPreviews.kt")
        val previewCode = generatePreviewCode(packageName, previewPackage, iconConfigs, hasAndroidxPreview, hasJetpackPreview)

        previewFile.writeText(previewCode)
    }

    private fun generatePreviewCode(
        symbolsPackage: String,
        previewPackage: String,
        iconConfigs: Map<String, List<SymbolStyle>>,
        hasAndroidxPreview: Boolean,
        hasJetpackPreview: Boolean
    ): String {
        return buildString {
            appendLine("// Auto-generated Material Symbols Previews")
            appendLine("// Generated by SymbolCraft")
            appendLine()
            appendLine("@file:Suppress(\"unused\", \"FunctionName\")")
            appendLine()
            appendLine("package $previewPackage")
            appendLine()

            // Imports
            appendLine("import androidx.compose.foundation.background")
            appendLine("import androidx.compose.foundation.layout.Arrangement")
            appendLine("import androidx.compose.foundation.layout.Box")
            appendLine("import androidx.compose.foundation.layout.Column")
            appendLine("import androidx.compose.foundation.layout.ExperimentalLayoutApi")
            appendLine("import androidx.compose.foundation.layout.FlowRow")
            appendLine("import androidx.compose.foundation.layout.padding")
            appendLine("import androidx.compose.foundation.layout.size")
            appendLine("import androidx.compose.material3.Icon")
            appendLine("import androidx.compose.material3.MaterialTheme")
            appendLine("import androidx.compose.material3.Surface")
            appendLine("import androidx.compose.material3.Text")
            appendLine("import androidx.compose.runtime.Composable")
            appendLine("import androidx.compose.ui.Alignment")
            appendLine("import androidx.compose.ui.Modifier")
            appendLine("import androidx.compose.ui.graphics.Color")
            appendLine("import androidx.compose.ui.text.style.TextAlign")
            appendLine("import androidx.compose.ui.unit.dp")
            appendLine("import androidx.compose.ui.unit.sp")

            // Preview annotations
            if (hasAndroidxPreview) {
                appendLine("import androidx.compose.ui.tooling.preview.Preview")
            }
            if (hasJetpackPreview) {
                appendLine("import androidx.compose.desktop.ui.tooling.preview.Preview")
            }

            // Import generated symbols
            appendLine("import ${symbolsPackage}.MaterialSymbols")

            appendLine()

            // Generate individual icon previews
            iconConfigs.forEach { (iconName, styles) ->
                styles.forEach { style ->
                    val iconProperty = "${iconName.replaceFirstChar { it.titlecase() }}${style.signature}"
                    generateIconPreview(iconProperty, iconName, style, hasAndroidxPreview, hasJetpackPreview)
                }
            }

            // Generate overview preview
            generateOverviewPreview(iconConfigs, hasAndroidxPreview, hasJetpackPreview)
        }
    }

    private fun StringBuilder.generateIconPreview(
        iconProperty: String,
        iconName: String,
        style: SymbolStyle,
        hasAndroidxPreview: Boolean,
        hasJetpackPreview: Boolean
    ) {
        // Generate preview annotations
        if (hasAndroidxPreview) {
            appendLine("@androidx.compose.ui.tooling.preview.Preview(")
            appendLine("    name = \"$iconName - ${style.signature}\",")
            appendLine("    showBackground = true,")
            appendLine("    backgroundColor = 0x${backgroundColor.removePrefix("#")}")
            appendLine(")")
        }

        if (hasJetpackPreview) {
            appendLine("@androidx.compose.desktop.ui.tooling.preview.Preview")
        }

        appendLine("@Composable")
        appendLine("fun Preview${iconProperty}() {")
        appendLine("    MaterialTheme {")
        appendLine("        Surface {")
        appendLine("            Column(")
        appendLine("                horizontalAlignment = Alignment.CenterHorizontally,")
        appendLine("                modifier = Modifier.padding(16.dp)")
        appendLine("            ) {")
        appendLine("                Icon(")
        appendLine("                    imageVector = MaterialSymbols.$iconProperty,")
        appendLine("                    contentDescription = \"$iconName\",")
        appendLine("                    modifier = Modifier.size(${iconSize}.dp)")
        appendLine("                )")
        appendLine("                Text(")
        appendLine("                    text = \"$iconName\",")
        appendLine("                    fontSize = 12.sp,")
        appendLine("                    textAlign = TextAlign.Center,")
        appendLine("                    modifier = Modifier.padding(top = 4.dp)")
        appendLine("                )")
        appendLine("                Text(")
        appendLine("                    text = \"${style.signature}\",")
        appendLine("                    fontSize = 10.sp,")
        appendLine("                    color = Color.Gray,")
        appendLine("                    textAlign = TextAlign.Center")
        appendLine("                )")
        appendLine("            }")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
        appendLine()
    }

    private fun StringBuilder.generateOverviewPreview(
        iconConfigs: Map<String, List<SymbolStyle>>,
        hasAndroidxPreview: Boolean,
        hasJetpackPreview: Boolean
    ) {
        // Generate overview preview with all icons
        if (hasAndroidxPreview) {
            appendLine("@androidx.compose.ui.tooling.preview.Preview(")
            appendLine("    name = \"All Material Symbols Overview\",")
            appendLine("    showBackground = true,")
            appendLine("    backgroundColor = 0x${backgroundColor.removePrefix("#")},")
            appendLine("    widthDp = 400,")
            appendLine("    heightDp = 600")
            appendLine(")")
        }

        if (hasJetpackPreview) {
            appendLine("@androidx.compose.desktop.ui.tooling.preview.Preview")
        }

        appendLine("@OptIn(ExperimentalLayoutApi::class)")
        appendLine("@Composable")
        appendLine("fun PreviewAllMaterialSymbols() {")
        appendLine("    MaterialTheme {")
        appendLine("        Surface {")
        appendLine("            Column(")
        appendLine("                modifier = Modifier.padding(16.dp)")
        appendLine("            ) {")
        appendLine("                Text(")
        appendLine("                    text = \"Material Symbols (${iconConfigs.values.sumOf { it.size }} icons)\",")
        appendLine("                    style = MaterialTheme.typography.headlineSmall,")
        appendLine("                    modifier = Modifier.padding(bottom = 16.dp)")
        appendLine("                )")
        appendLine("                FlowRow(")
        appendLine("                    horizontalArrangement = Arrangement.spacedBy(8.dp),")
        appendLine("                    verticalArrangement = Arrangement.spacedBy(8.dp)")
        appendLine("                ) {")

        iconConfigs.forEach { (iconName, styles) ->
            styles.forEach { style ->
                val iconProperty = "${iconName.replaceFirstChar { it.titlecase() }}${style.signature}"
                appendLine("                    Column(")
                appendLine("                        horizontalAlignment = Alignment.CenterHorizontally")
                appendLine("                    ) {")
                appendLine("                        Icon(")
                appendLine("                            imageVector = MaterialSymbols.$iconProperty,")
                appendLine("                            contentDescription = \"$iconName\",")
                appendLine("                            modifier = Modifier.size(24.dp)")
                appendLine("                        )")
                appendLine("                        Text(")
                appendLine("                            text = \"$iconName\",")
                appendLine("                            fontSize = 8.sp,")
                appendLine("                            textAlign = TextAlign.Center,")
                appendLine("                            maxLines = 1")
                appendLine("                        )")
                appendLine("                    }")
            }
        }

        appendLine("                }")
        appendLine("            }")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
        appendLine()
    }
}