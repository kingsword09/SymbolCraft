name: CI/CD Pipeline

on:
  push:
    branches: [ "**" ]  # Trigger on all branches
  pull_request:
    branches: [ "**" ]  # Trigger on all branches

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

jobs:
  build:
    name: Build and Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build plugin
      env:
        # Set empty signing vars to skip signing in regular CI builds
        SIGNING_KEY: ""
        SIGNING_PASSWORD: ""
      run: ./gradlew build --stacktrace

    - name: Run tests (if any)
      run: ./gradlew test --stacktrace
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/libs/*.jar
          build/distributions/*.zip

  example-test:
    name: Test Example Project
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Publish plugin to local repository
      run: ./gradlew publishToMavenLocal --stacktrace
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}

    - name: Test example project
      working-directory: example
      run: |
        chmod +x ./gradlew
        # Test SymbolCraft icon generation
        ./gradlew :composeApp:generateSymbolCraftIcons --stacktrace
        # Build the example project
        ./gradlew build --stacktrace

  validate-plugin:
    name: Validate Plugin
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Validate plugin tasks
      run: |
        ./gradlew tasks --all | grep -i symbolcraft || echo "No SymbolCraft tasks found yet"
        ./gradlew publishToMavenLocal --stacktrace
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}

    - name: Verify plugin publication
      run: |
        if [ -d ~/.m2/repository/io/github/kingsword09 ]; then
          echo "✅ Plugin published to local Maven repository"
          find ~/.m2/repository/io/github/kingsword09 -name "*.jar" | head -5
        else
          echo "❌ Plugin not found in local Maven repository"
          exit 1
        fi

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [build, example-test, validate-plugin]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release):')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Extract version from commit message
      id: extract_version
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        VERSION=$(echo "$COMMIT_MSG" | grep -oP 'chore\(release\):\s*v\K[0-9]+\.[0-9]+\.[0-9]+')
        if [ -z "$VERSION" ]; then
          echo "No valid version found in commit message: $COMMIT_MSG"
          exit 1
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Update version in build files
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" build.gradle.kts
        echo "Updated version to $VERSION"

    - name: Build release artifacts
      run: ./gradlew build publishToMavenLocal --stacktrace
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}

    - name: List build artifacts
      run: |
        echo "Listing build directory contents:"
        find build -name "*.jar" -o -name "*.zip" | head -10
        echo "Current version in build.gradle.kts:"
        grep "version = " build.gradle.kts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.extract_version.outputs.version }}
        name: v${{ steps.extract_version.outputs.version }}
        body: |
          ## SymbolCraft v${{ steps.extract_version.outputs.version }}

          Generate icons on-demand from multiple libraries (Material Symbols, Bootstrap Icons, etc.) for Compose Multiplatform with smart caching.

          ### 📦 Installation
          ```kotlin
          plugins {
              id("io.github.kingsword09.symbolcraft") version "${{ steps.extract_version.outputs.version }}"
          }
          ```

          ### 🔗 Links
          - [Gradle Plugin Portal](https://plugins.gradle.org/plugin/io.github.kingsword09.symbolcraft)
          - [Documentation](https://github.com/kingsword09/SymbolCraft#readme)
        files: |
          build/libs/*.jar
          build/distributions/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        token: ${{ secrets.GITHUB_TOKEN }}

  publish-gradle-plugin:
    name: Publish to Gradle Plugin Portal
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release):')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Extract version from commit message
      id: extract_version
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        VERSION=$(echo "$COMMIT_MSG" | grep -oP 'chore\(release\):\s*v\K[0-9]+\.[0-9]+\.[0-9]+')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update version in build files
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" build.gradle.kts

    - name: Publish to Gradle Plugin Portal
      env:
        GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
        GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
      run: ./gradlew publishPlugins --stacktrace

  publish-maven-central:
    name: Publish to Maven Central
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release):')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up JDK 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'corretto'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Extract version from commit message
      id: extract_version
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        VERSION=$(echo "$COMMIT_MSG" | grep -oP 'chore\(release\):\s*v\K[0-9]+\.[0-9]+\.[0-9]+')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update version in build files
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" build.gradle.kts

    - name: Publish to Maven Central
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
      run: ./gradlew publishToMavenCentral --no-configuration-cache --stacktrace

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [publish-gradle-plugin, publish-maven-central]
    if: always() && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release):')

    steps:
    - name: Notify success
      if: needs.publish-gradle-plugin.result == 'success' && needs.publish-maven-central.result == 'success'
      run: |
        echo "🎉 SymbolCraft release completed successfully!"
        echo "✅ Plugin published to Gradle Plugin Portal"
        echo "✅ Plugin published to Maven Central"
        echo "🔗 Gradle Portal: https://plugins.gradle.org/plugin/io.github.kingsword09.symbolcraft"
        echo "🔗 Maven Central: https://central.sonatype.com/artifact/io.github.kingsword09/symbolcraft"

    - name: Notify partial success
      if: (needs.publish-gradle-plugin.result == 'success' && needs.publish-maven-central.result != 'success') || (needs.publish-gradle-plugin.result != 'success' && needs.publish-maven-central.result == 'success')
      run: |
        echo "⚠️ SymbolCraft release partially completed!"
        echo "Gradle Portal: ${{ needs.publish-gradle-plugin.result }}"
        echo "Maven Central: ${{ needs.publish-maven-central.result }}"

    - name: Notify failure
      if: needs.publish-gradle-plugin.result == 'failure' && needs.publish-maven-central.result == 'failure'
      run: |
        echo "❌ SymbolCraft release failed!"
        echo "🔍 Check the logs for details"
        echo "📋 Common issues: Gradle Portal credentials, Maven Central credentials, version conflicts"